//************************************************************************
// file name: SignalAnalyzer.cc
//************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>

#include "SignalAnalyzer.h"

using namespace std;

/*****************************************************************************

  Name: XErrorCallback

  Purpose: The purpose of this function is to to handle errors that
  are generated by X.

  Calling Sequence: XErrorCallback(displayPtr,errorPtr)
 
  Inputs:

    displayPtr - A pointer to the display for which the error was
    generated.

    errorPtr - A pointer to the error event for which the error
    was generated.

 Outputs:

    None.

*****************************************************************************/
static int XErrorCallback(Display *displayPtr,XErrorEvent *errorPtr)
{
  char msg[80];

  // Retrieve the error text
  XGetErrorText (displayPtr,errorPtr->error_code,msg,80);

  // Display the error message to the user.
  fprintf(stderr,"%s\n",msg);

  return (0);

} // XErrorCallback

/*****************************************************************************

  Name: SignalAnalyzer

  Purpose: The purpose of this function is to serve as the constructor for
  an instance of an SignalAnalyzer.

  Calling Sequence: SignalAnalyzer(windowWidthInPixels,
                                   windowHeightInPixels)
 
  Inputs:

    windowWidthInPixels - The number of pixels in the horizontal
    direction.

    windowHeightInPixels - The number of pixels in the vertical
    direction.

 Outputs:

    None.

*****************************************************************************/
SignalAnalyzer::SignalAnalyzer(int windowWidthInPixels,
                               int windowHeightInPixels,
                               int logicalWindowWidth,
                               int logicalWindowHeight)
{
  int blackColor;
  int whiteColor;
  XEvent event;

  this->windowWidthInPixels = windowWidthInPixels;
  this->windowHeightInPixels = windowHeightInPixels;

  // Register the X error handler.
  XSetErrorHandler(XErrorCallback);

  // Connect to the X server.
  displayPtr = XOpenDisplay(NULL);

  // Retrieve these two colors.
  blackColor = BlackPixel(displayPtr,DefaultScreen(displayPtr));
  whiteColor = WhitePixel(displayPtr,DefaultScreen(displayPtr));

  // Create the window
  window = XCreateSimpleWindow(displayPtr,
                               DefaultRootWindow(displayPtr),
                               0,
                               0, 
                               windowWidthInPixels,
                               windowHeightInPixels,
                               0,
                               blackColor,
                               blackColor);

  // We want to get MapNotify events
  XSelectInput(displayPtr,window,StructureNotifyMask);

  // Create a "Graphics Context"
  graphicsContext = XCreateGC(displayPtr,window,0,NULL);

  // Tell the GC we draw using the white color
  XSetForeground(displayPtr,graphicsContext,whiteColor);

  // "Map" the window (that is, make it appear on the screen)
  XMapWindow(displayPtr,window);

  // Wait for the MapNotify event
  for(;;)
  {
    XNextEvent(displayPtr, &event);

    if (event.type == MapNotify)
    {
      break;
    } // if);
  } // for

  return;

} // SignalAnalyzer

/*****************************************************************************

  Name: ~SignalAnalyzer

  Purpose: The purpose of this function is to serve as the destructor for
  an instance of an SignalAnalyzer.

  Calling Sequence: ~SignalAnalyzer()

  Inputs:

    None.

  Outputs:

    None.

*****************************************************************************/
SignalAnalyzer::~SignalAnalyzer(void)
{

  XCloseDisplay(displayPtr);

  return;

} // ~SignalAnalyzer

/*****************************************************************************

  Name: plotSignalMagnitude

  Purpose: The purpose of this function is to perform a magnitude plot
  of IQ data to the display.

  Calling Sequence: plotSignalMagnitude(signalBufferPtr,bufferLength)

  Inputs:

    signalBufferPtr - A pointer to a buffer of IQ data.  The buffer is
    formatted with interleaved data as: I1,Q1,I2,Q2,...

    bufferLength - The number of values in the signal buffer.  This
    represents the total number of items in the buffer, rather than
    the number of IQ sample pairs in the buffer.

 Outputs:

    None.

*****************************************************************************/
void SignalAnalyzer::plotSignalMagnitude(
  int8_t *signalBufferPtr,
  uint32_t bufferLength)
{
  uint32_t i;

  bufferLength = computeSignalMagnitude(signalBufferPtr, bufferLength);

  for (i = 0; i < bufferLength; i++)
  {
    points[i].x = (short)i;
    points[i].y = windowHeightInPixels - magnitudeBuffer[i];
  } // for

  // Erase the previous plot.
  XClearWindow(displayPtr,window);

  // Plot the signal.
  XDrawLines(displayPtr,
             window,
             graphicsContext,
             points,bufferLength,
             CoordModeOrigin);

  // Display the title of the plot.
  XDrawString(displayPtr,window,graphicsContext,700,10,"Signal Magnitude",17);

  // Send the request to the server
  XFlush(displayPtr);

  return;

} // plotSignalMagnitude

/*****************************************************************************

  Name: computeSignalMagnitude

  Purpose: The purpose of this function is to perform a magnitude plot
  of IQ data to the display.

  Calling Sequence: computeSignalMagnitude(signalBufferPtr,bufferLength)

  Inputs:

    signalBufferPtr - A pointer to a buffer of IQ data.  The buffer is
    formatted with interleaved data as: I1,Q1,I2,Q2,...

    bufferLength - The number of values in the signal buffer.  This
    represents the total number of items in the buffer, rather than
    the number of IQ sample pairs in the buffer.

 Outputs:

    None.

*****************************************************************************/
uint32_t SignalAnalyzer::computeSignalMagnitude(
  int8_t *signalBufferPtr,
  uint32_t bufferLength)
{
  uint32_t i;
  uint32_t magnitudeIndex;
  int16_t iMagnitude, qMagnitude;

  // Reference the beginning of the magnitude buffer.
  magnitudeIndex = 0;

  for (i = 0; i < bufferLength; i += 2)
  {
    // Grab these values for the magnitude estimator.
    iMagnitude = abs((int16_t)signalBufferPtr[i]);
    qMagnitude = abs((int16_t)signalBufferPtr[i+1]);

    //_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    // This block of code performs a magnitude estimation of
    // the complex signal.
    //_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    if (iMagnitude > qMagnitude)
    {
      magnitudeBuffer[magnitudeIndex] = iMagnitude  + (qMagnitude >> 1);
    } // if
    else
    {
      magnitudeBuffer[magnitudeIndex] = qMagnitude + (iMagnitude >> 1);
    } // else
    //_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/

    // Reference the next storage location.
    magnitudeIndex++;
  } // for

  return (bufferLength / 2);

} // computeSignalMagnitude


